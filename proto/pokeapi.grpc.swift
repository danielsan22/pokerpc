//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/pokeapi.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Proto_PokemonServiceClient`, then call methods of this protocol to make API calls.
internal protocol Proto_PokemonServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? { get }

  func hello(
    _ request: Proto_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Empty, Proto_Greeting>

  func getList(
    _ request: Proto_ListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_ListRequest, Proto_PokemonList>
}

extension Proto_PokemonServiceClientProtocol {
  internal var serviceName: String {
    return "proto.PokemonService"
  }

  /// Unary call to Hello
  ///
  /// - Parameters:
  ///   - request: Request to send to Hello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hello(
    _ request: Proto_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Empty, Proto_Greeting> {
    return self.makeUnaryCall(
      path: Proto_PokemonServiceClientMetadata.Methods.hello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }

  /// Unary call to GetList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getList(
    _ request: Proto_ListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_ListRequest, Proto_PokemonList> {
    return self.makeUnaryCall(
      path: Proto_PokemonServiceClientMetadata.Methods.getList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetListInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Proto_PokemonServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Proto_PokemonServiceNIOClient")
internal final class Proto_PokemonServiceClient: Proto_PokemonServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.PokemonService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Proto_PokemonServiceNIOClient: Proto_PokemonServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.PokemonService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Proto_PokemonServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? { get }

  func makeHelloCall(
    _ request: Proto_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Empty, Proto_Greeting>

  func makeGetListCall(
    _ request: Proto_ListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_ListRequest, Proto_PokemonList>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_PokemonServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_PokemonServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeHelloCall(
    _ request: Proto_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Empty, Proto_Greeting> {
    return self.makeAsyncUnaryCall(
      path: Proto_PokemonServiceClientMetadata.Methods.hello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }

  internal func makeGetListCall(
    _ request: Proto_ListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_ListRequest, Proto_PokemonList> {
    return self.makeAsyncUnaryCall(
      path: Proto_PokemonServiceClientMetadata.Methods.getList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_PokemonServiceAsyncClientProtocol {
  internal func hello(
    _ request: Proto_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Greeting {
    return try await self.performAsyncUnaryCall(
      path: Proto_PokemonServiceClientMetadata.Methods.hello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }

  internal func getList(
    _ request: Proto_ListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_PokemonList {
    return try await self.performAsyncUnaryCall(
      path: Proto_PokemonServiceClientMetadata.Methods.getList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Proto_PokemonServiceAsyncClient: Proto_PokemonServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_PokemonServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Proto_PokemonServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'hello'.
  func makeHelloInterceptors() -> [ClientInterceptor<Proto_Empty, Proto_Greeting>]

  /// - Returns: Interceptors to use when invoking 'getList'.
  func makeGetListInterceptors() -> [ClientInterceptor<Proto_ListRequest, Proto_PokemonList>]
}

internal enum Proto_PokemonServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PokemonService",
    fullName: "proto.PokemonService",
    methods: [
      Proto_PokemonServiceClientMetadata.Methods.hello,
      Proto_PokemonServiceClientMetadata.Methods.getList,
    ]
  )

  internal enum Methods {
    internal static let hello = GRPCMethodDescriptor(
      name: "Hello",
      path: "/proto.PokemonService/Hello",
      type: GRPCCallType.unary
    )

    internal static let getList = GRPCMethodDescriptor(
      name: "GetList",
      path: "/proto.PokemonService/GetList",
      type: GRPCCallType.unary
    )
  }
}

